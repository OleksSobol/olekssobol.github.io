name: Update Latest Commits

on:
  schedule:
    - cron: '0 0 * * *'  # daily at midnight UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update_commits:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch commits and build page
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: OleksSobol
        run: |
          set -euo pipefail

          # Front matter
          {
            echo "---"
            echo "layout: single"
            echo "title: Latest Commits"
            echo "permalink: /commits/"
            echo "toc: false"
            echo "---"
            echo
            echo "# Latest Commits Across All Projects"
            echo
          } > commits.md

          # Get owned, non-fork repos (limit 100; extend with pagination later if needed)
          REPOS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/users/${USERNAME}/repos?per_page=100" \
            | jq -r '.[] | select(.fork == false and .owner.login == "'"${USERNAME}"'") | .name')

          # If none found, bail gracefully
          if [ -z "$REPOS" ]; then
            echo "_No owned repositories found._" >> commits.md
            exit 0
          fi

          # Collect commits as NDJSON
          COMMITS_JSON=$(
            echo "$REPOS" | while read -r repo; do
              # Grab latest 10 commits per repo
              curl -s -H "Authorization: token $GITHUB_TOKEN" \
                "https://api.github.com/repos/${USERNAME}/${repo}/commits?per_page=10" \
              | jq -c --arg repo "$repo" --arg user "$USERNAME" '
                  .[] | {
                    repo: $repo,
                    repo_url: ("https://github.com/" + $user + "/" + $repo),
                    message: (.commit.message // "" | gsub("\r?\n"; " ")),
                    date: (.commit.author.date // .commit.committer.date),
                    url: .html_url
                  }'
            done
          )

          # If no commits at all, write note
          if [ -z "$COMMITS_JSON" ]; then
            echo "_No recent commits found._" >> commits.md
          else
            # Group by repo, sort groups by most recent commit, list top 5 per repo
            echo "$COMMITS_JSON" | jq -s -r '
              # remove any null/invalids
              map(select(.date != null and .url != null and .message != null)) 
              | group_by(.repo)
              | sort_by( (max_by(.date).date) ) | reverse
              | .[]
              | . as $group
              | "## [\($group[0].repo)](\($group[0].repo_url))\n"
                +
                (
                  $group
                  | sort_by(.date) | reverse | .[:5]
                  | map("- [\(.message)](\(.url)) (\(.date | split(\"T\")[0]))")
                  | join("\n")
                )
                + "\n"
            ' >> commits.md
          fi

      - name: Commit changes
        run: |
          set -e
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add commits.md
          git commit -m "Update latest commits" || echo "No changes"
          git push
